name: Build and publish

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
# {{{ build
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: bump-version

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Upgrade Pip
        run: |
          # install pip>=20.1 to use "pip cache dir"
          python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python3 -m pip install -r ./requirements.txt
          python3 -m pip install .

      - name: create sphinx documentation
        run: |
          cd docs
          make html

      - name: Publish to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: ./docs/_build/html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# }}}

# {{{ publish-pypi
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build, bump-version]
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Upgrade Pip
        run: |
          # install pip>=20.1 to use "pip cache dir"
          python3 -m pip install --upgrade pip
      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python3 -m pip install -r ./requirements.txt
          python3 -m pip install .

      - name: Build and Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USER_NAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*
# }}}

# {{{ bump-version
  bump-version:

      runs-on: ubuntu-latest
      if: "!startsWith(github.event.head_commit.message, '[SKIP]')"

      steps:

      - uses: actions/checkout@v2
      - name: Setup Git
        run: |
          git config user.name "ME-64"
          git config user.email 'milo_elliott@icloud.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout "${GITHUB_REF:11}"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Setup env variables
        run: |
          echo "SKIPBUMP=FALSE" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version
      # If a commit starts with [MAJOR] a new major verion upgrade will be
      # triggered. Use with caution as Major upgrades denote backwards
      # incompatibility. Yet I like it to be integrated in the CI
      - name: Bump Major Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version minor
          echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
        if: "startsWith(github.event.head_commit.message, '[MAJOR]')"

      - name: Bump Minor Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version minor
          echo "SKIPBUMP=TRUE" >> $GITHUB_ENV
        if: "startsWith(github.event.head_commit.message, '[FEATURE]')"

      # Default action
      - name: Bump Patch Version
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          bump2version patch
        if: env.SKIPBUMP == 'FALSE'

      - name: Commit version change to master
        run: |
          git push --follow-tags
# }}}
